{"ast":null,"code":"var _jsxFileName = \"/Users/rb/Desktop/React/quizapp/vocab-app/src/views/Sets.js\";\nimport React, { useContext, useEffect, useState, useCallback } from \"react\";\nimport { DataContext } from \"../Store\";\nimport styled from \"styled-components\";\nimport Card from \"react-bootstrap/Card\";\nimport Badge from \"react-bootstrap/Badge\";\nimport SetForm from \"../components/SetForm\";\nimport Collapse from \"react-bootstrap/Collapse\";\nimport Button from \"react-bootstrap/Button\";\nimport { Link } from \"react-router-dom\";\nimport QuestionForm from \"../components/QuestionForm\";\nconst Styles = styled.div`\n  .container {\n    width: 500px;\n    align-content: center;\n  }\n\n  .card {\n    padding: 15px;\n    text-align: left;\n    margin-bottom: 20px;\n    margin-top: 15px;\n  }\n\n  .badge {\n    margin-left: 5px;\n  }\n\n  .btns {\n    text-align: center;\n  }\n\n  .btn {\n    margin: 10px;\n  }\n\n  .add-questions-btn {\n    margin-left: 10px;\n    padding-top: 0px;\n    padding-bottom: 0px;\n    padding-left: 6px;\n    padding-right: 6px;\n    border: 1px solid lightgray;\n  }\n`;\nexport default function Sets() {\n  // Global state storing all sets\n  const [data, setData] = useContext(DataContext); // Tracks if a set is being edited\n\n  const [editedSet, updateSet] = useState({\n    setName: \"\",\n    description: \"\",\n    id: null,\n    index: null,\n    questions: []\n  }); // Tracks which set questions are being updated\n\n  const [addArr, setShowAdd] = useState([false, false]); // Force update state\n\n  const [updateCount, updateView] = useState(0);\n  useEffect(() => {\n    console.log(data);\n  }, [data]);\n\n  const editSet = (set, editIndex) => {\n    updateSet({\n      setName: set.setName,\n      description: set.description,\n      id: set.id,\n      index: editIndex,\n      questions: set.questions\n    });\n  };\n\n  const deleteSet = index => {\n    let tempData = data;\n    tempData.splice(index, 1);\n    updateView(updateCount + 1);\n    setData(tempData);\n  };\n\n  const practiceSet = set => {\n    updateView(updateCount + 1);\n  };\n\n  const updateEdits = useCallback(newData => {\n    setData(newData);\n    console.log(\"NEXT IS CALLBACK DATA\");\n    console.log(data);\n    console.log(\"update is being called\");\n    updateSet({\n      setName: \"\",\n      description: \"\",\n      id: null,\n      index: null,\n      questions: []\n    });\n  }, [data, setData]);\n\n  const toggleAdd = index => {\n    let tempData = addArr;\n    tempData[index] = !tempData[index];\n    updateView(updateCount + 1);\n    setShowAdd(tempData);\n  };\n\n  return /*#__PURE__*/React.createElement(Styles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SetForm, {\n    newSet: editedSet,\n    updateCallback: updateEdits,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }), data.map((set, index) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    key: set.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Card.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }, set.setName, \" \", /*#__PURE__*/React.createElement(Badge, {\n    variant: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 33\n    }\n  }, set.questions.length), /*#__PURE__*/React.createElement(Button, {\n    variant: \"light\",\n    className: \"add-questions-btn\",\n    onClick: () => toggleAdd(index),\n    \"aria-controls\": \"questions-show\",\n    \"aria-expanded\": addArr[index],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 19\n    }\n  }, \"+\"))), /*#__PURE__*/React.createElement(Card.Subtitle, {\n    className: \"mb-2 text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 15\n    }\n  }, \"Vocab set\"), /*#__PURE__*/React.createElement(Card.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 15\n    }\n  }, set.description), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btns\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outline-primary\",\n    className: \"btn\",\n    onClick: () => editSet(set, index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }, \"Edit\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"outline-danger\",\n    onClick: () => deleteSet(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, \"Delete\"), /*#__PURE__*/React.createElement(Link, {\n    to: {\n      pathname: \"/practice\",\n      inputSet: set\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outline-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 19\n    }\n  }, \"Practice\"))))), /*#__PURE__*/React.createElement(Collapse, {\n    in: addArr[index],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"questions-show\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(QuestionForm, {\n    questions: set.questions,\n    currIndex: index,\n    closeCallback: toggleAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 15\n    }\n  }))))));\n}","map":{"version":3,"sources":["/Users/rb/Desktop/React/quizapp/vocab-app/src/views/Sets.js"],"names":["React","useContext","useEffect","useState","useCallback","DataContext","styled","Card","Badge","SetForm","Collapse","Button","Link","QuestionForm","Styles","div","Sets","data","setData","editedSet","updateSet","setName","description","id","index","questions","addArr","setShowAdd","updateCount","updateView","console","log","editSet","set","editIndex","deleteSet","tempData","splice","practiceSet","updateEdits","newData","toggleAdd","map","length","pathname","inputSet"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState, useCallback } from \"react\";\nimport { DataContext } from \"../Store\";\n\nimport styled from \"styled-components\";\n\nimport Card from \"react-bootstrap/Card\";\nimport Badge from \"react-bootstrap/Badge\";\nimport SetForm from \"../components/SetForm\";\nimport Collapse from \"react-bootstrap/Collapse\";\nimport Button from \"react-bootstrap/Button\";\nimport { Link } from \"react-router-dom\";\n\nimport QuestionForm from \"../components/QuestionForm\";\n\nconst Styles = styled.div`\n  .container {\n    width: 500px;\n    align-content: center;\n  }\n\n  .card {\n    padding: 15px;\n    text-align: left;\n    margin-bottom: 20px;\n    margin-top: 15px;\n  }\n\n  .badge {\n    margin-left: 5px;\n  }\n\n  .btns {\n    text-align: center;\n  }\n\n  .btn {\n    margin: 10px;\n  }\n\n  .add-questions-btn {\n    margin-left: 10px;\n    padding-top: 0px;\n    padding-bottom: 0px;\n    padding-left: 6px;\n    padding-right: 6px;\n    border: 1px solid lightgray;\n  }\n`;\n\nexport default function Sets() {\n  // Global state storing all sets\n  const [data, setData] = useContext(DataContext);\n\n  // Tracks if a set is being edited\n  const [editedSet, updateSet] = useState({\n    setName: \"\",\n    description: \"\",\n    id: null,\n    index: null,\n    questions: [],\n  });\n\n  // Tracks which set questions are being updated\n  const [addArr, setShowAdd] = useState([false, false]);\n\n  // Force update state\n  const [updateCount, updateView] = useState(0);\n\n  useEffect(() => {\n    console.log(data);\n  }, [data]);\n\n  const editSet = (set, editIndex) => {\n    updateSet({\n      setName: set.setName,\n      description: set.description,\n      id: set.id,\n      index: editIndex,\n      questions: set.questions,\n    });\n  };\n\n  const deleteSet = (index) => {\n    let tempData = data;\n    tempData.splice(index, 1);\n    updateView(updateCount + 1);\n    setData(tempData);\n  };\n\n  const practiceSet = (set) => {\n    updateView(updateCount + 1);\n  };\n\n  const updateEdits = useCallback(\n    (newData) => {\n      setData(newData);\n      console.log(\"NEXT IS CALLBACK DATA\");\n      console.log(data);\n      console.log(\"update is being called\");\n\n      updateSet({ setName: \"\", description: \"\", id: null, index: null, questions: [] });\n    },\n    [data, setData]\n  );\n\n  const toggleAdd = (index) => {\n    let tempData = addArr;\n    tempData[index] = !tempData[index];\n    updateView(updateCount + 1);\n    setShowAdd(tempData);\n  };\n\n  return (\n    <Styles>\n      <SetForm newSet={editedSet} updateCallback={updateEdits} />\n      {data.map((set, index) => (\n        <div className=\"container\" key={set.id}>\n          <Card>\n            <Card.Body>\n              <Card.Title>\n                <h3>\n                  {set.setName} <Badge variant=\"primary\">{set.questions.length}</Badge>\n                  <Button\n                    variant=\"light\"\n                    className=\"add-questions-btn\"\n                    onClick={() => toggleAdd(index)}\n                    aria-controls=\"questions-show\"\n                    aria-expanded={addArr[index]}\n                  >\n                    +\n                  </Button>\n                </h3>\n              </Card.Title>\n              <Card.Subtitle className=\"mb-2 text-muted\">Vocab set</Card.Subtitle>\n              <Card.Text>{set.description}</Card.Text>\n              <div className=\"btns\">\n                <Button variant=\"outline-primary\" className=\"btn\" onClick={() => editSet(set, index)}>\n                  Edit\n                </Button>\n\n                <Button variant=\"outline-danger\" onClick={() => deleteSet(index)}>\n                  Delete\n                </Button>\n\n                <Link to={{ pathname: \"/practice\", inputSet: set }}>\n                  <Button variant=\"outline-success\">Practice</Button>\n                </Link>\n              </div>\n            </Card.Body>\n          </Card>\n          <Collapse in={addArr[index]}>\n            <div id=\"questions-show\">\n              <QuestionForm questions={set.questions} currIndex={index} closeCallback={toggleAdd} />\n            </div>\n          </Collapse>\n        </div>\n      ))}\n    </Styles>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
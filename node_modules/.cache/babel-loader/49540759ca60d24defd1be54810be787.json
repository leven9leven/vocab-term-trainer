{"ast":null,"code":"var _jsxFileName = \"/Users/rb/Desktop/React/quizapp/vocab-app/src/components/SetForm.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { DataContext } from \"../Store\";\nconst Styles = styled.div`\n  .container {\n    padding-top: 20px;\n    width: 500px;\n    align-content: center;\n  }\n\n  .form-group {\n    text-align: left;\n  }\n\n  .btn {\n    margin: 15px;\n    margin-top: 0px;\n  }\n`;\nexport default function SetForm({\n  newSet\n}) {\n  const [formData, setFormData] = useState({\n    setName: \"\",\n    description: \"\"\n  });\n  const [data, setData] = useContext(DataContext); // same as componentWillReceiveProps\n\n  useEffect(() => {\n    console.log(newSet);\n    setFormData({\n      setName: newSet.setName,\n      description: newSet.description\n    });\n  }, [newSet]);\n\n  const handleSetName = event => {\n    event.persist();\n    setFormData(formData => ({ ...formData,\n      setName: event.target.value\n    }));\n  };\n\n  const handleDescription = event => {\n    event.persist();\n    setFormData(formData => ({ ...formData,\n      description: event.target.value\n    }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (newSet.id === null) {\n      const insertForm = {\n        id: Math.floor(Math.random() * 99999999),\n        setName: formData.setName,\n        description: formData.description,\n        questions: []\n      };\n      setData([...data, insertForm]);\n      setFormData({\n        setName: \"\",\n        description: \"\"\n      });\n    } else {\n      let tempData = data;\n      tempData[newSet.index] = {\n        id: newSet.id,\n        setName: formData.setName,\n        description: formData.description,\n        questions: newSet.questions\n      };\n      console.log(tempData);\n      setData(tempData);\n      console.log(data); // perform callback that resets the id and other parameters in sets.js\n    }\n  };\n\n  const handleReset = e => {\n    e.preventDefault();\n    setFormData({\n      setName: \"\",\n      description: \"\"\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Styles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formBasicEmail\",\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, \"Enter the name of your vocab set\"), /*#__PURE__*/React.createElement(Form.Control, {\n    placeholder: \"Name\",\n    onChange: handleSetName,\n    value: formData.setName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formBasicPassword\",\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, \"Enter a short description\"), /*#__PURE__*/React.createElement(Form.Control, {\n    placeholder: \"Description\",\n    onChange: handleDescription,\n    value: formData.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    onClick: e => handleSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, \"Submit\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"danger\",\n    type: \"submit\",\n    onClick: e => handleReset(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, \"Reset\"))));\n}","map":{"version":3,"sources":["/Users/rb/Desktop/React/quizapp/vocab-app/src/components/SetForm.js"],"names":["React","useState","useContext","useEffect","styled","Form","Button","DataContext","Styles","div","SetForm","newSet","formData","setFormData","setName","description","data","setData","console","log","handleSetName","event","persist","target","value","handleDescription","handleSubmit","e","preventDefault","id","insertForm","Math","floor","random","questions","tempData","index","handleReset"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { DataContext } from \"../Store\";\n\nconst Styles = styled.div`\n  .container {\n    padding-top: 20px;\n    width: 500px;\n    align-content: center;\n  }\n\n  .form-group {\n    text-align: left;\n  }\n\n  .btn {\n    margin: 15px;\n    margin-top: 0px;\n  }\n`;\n\nexport default function SetForm({ newSet }) {\n  const [formData, setFormData] = useState({ setName: \"\", description: \"\" });\n  const [data, setData] = useContext(DataContext);\n\n  // same as componentWillReceiveProps\n  useEffect(() => {\n    console.log(newSet);\n    setFormData({ setName: newSet.setName, description: newSet.description });\n  }, [newSet]);\n\n  const handleSetName = (event) => {\n    event.persist();\n    setFormData((formData) => ({\n      ...formData,\n      setName: event.target.value,\n    }));\n  };\n\n  const handleDescription = (event) => {\n    event.persist();\n    setFormData((formData) => ({\n      ...formData,\n      description: event.target.value,\n    }));\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (newSet.id === null) {\n      const insertForm = {\n        id: Math.floor(Math.random() * 99999999),\n        setName: formData.setName,\n        description: formData.description,\n        questions: [],\n      };\n      setData([...data, insertForm]);\n      setFormData({ setName: \"\", description: \"\" });\n    } else {\n      let tempData = data;\n      tempData[newSet.index] = {\n        id: newSet.id,\n        setName: formData.setName,\n        description: formData.description,\n        questions: newSet.questions,\n      };\n      console.log(tempData);\n      setData(tempData);\n      console.log(data);\n      // perform callback that resets the id and other parameters in sets.js\n    }\n  };\n\n  const handleReset = (e) => {\n    e.preventDefault();\n    setFormData({ setName: \"\", description: \"\" });\n  };\n\n  return (\n    <Styles>\n      <div className=\"container\">\n        <Form>\n          <Form.Group controlId=\"formBasicEmail\" className=\"form-group\">\n            <Form.Label>Enter the name of your vocab set</Form.Label>\n            <Form.Control placeholder=\"Name\" onChange={handleSetName} value={formData.setName} />\n          </Form.Group>\n\n          <Form.Group controlId=\"formBasicPassword\" className=\"form-group\">\n            <Form.Label>Enter a short description</Form.Label>\n            <Form.Control placeholder=\"Description\" onChange={handleDescription} value={formData.description} />\n          </Form.Group>\n          <Button variant=\"primary\" type=\"submit\" onClick={(e) => handleSubmit(e)}>\n            Submit\n          </Button>\n\n          <Button variant=\"danger\" type=\"submit\" onClick={(e) => handleReset(e)}>\n            Reset\n          </Button>\n        </Form>\n      </div>\n    </Styles>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/rb/Desktop/React/quizapp/vocab-app/src/views/Sets.js\";\nimport React, { useContext, useEffect, useState, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport Card from \"react-bootstrap/Card\";\nimport Badge from \"react-bootstrap/Badge\";\nimport SetForm from \"../components/SetForm\";\nimport Collapse from \"react-bootstrap/Collapse\";\nimport { DataContext } from \"../Store\";\nimport QuestionForm from \"../components/QuestionForm\";\nconst Styles = styled.div`\n  .container {\n    width: 500px;\n    align-content: center;\n  }\n\n  .card {\n    text-align: left;\n  }\n\n  .badge {\n    margin-left: 5px;\n  }\n\n  .btns {\n    text-align: center;\n  }\n`;\nexport default function Sets() {\n  // Global state storing all sets\n  const [data, setData] = useContext(DataContext); // Tracks if a set is being edited\n\n  const [editedSet, updateSet] = useState({\n    setName: \"\",\n    description: \"\",\n    id: null,\n    index: null,\n    questions: []\n  }); // Tracks which set questions are being updated\n\n  const [addArr, setShowAdd] = useState([false, false]);\n  useEffect(() => {\n    console.log(data);\n  }, [data]);\n\n  const editSet = (set, editIndex) => {\n    updateSet({\n      setName: set.setName,\n      description: set.description,\n      id: set.id,\n      index: editIndex,\n      questions: set.questions\n    });\n  };\n\n  const deleteSet = index => {\n    let tempData = data;\n    tempData.splice(index, 1);\n    setData(tempData);\n  };\n\n  const practiceSet = set => {\n    console.log(data);\n  };\n\n  const updateEdits = useCallback(newData => {\n    setData(newData);\n    console.log(\"NEXT IS CALLBACK DATA\");\n    console.log(data);\n    console.log(\"update is being called\");\n    updateSet({\n      setName: \"\",\n      description: \"\",\n      id: null,\n      index: null,\n      questions: []\n    });\n  }, [data, setData]);\n\n  const toggleAdd = index => {\n    let tempData = addArr;\n    tempData[index] = !tempData[index];\n    setShowAdd(tempData);\n  };\n\n  return /*#__PURE__*/React.createElement(Styles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SetForm, {\n    newSet: editedSet,\n    updateCallback: updateEdits,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }), data.map((set, index) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    key: set.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Card.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, set.setName, \" \", /*#__PURE__*/React.createElement(Badge, {\n    variant: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 33\n    }\n  }, set.questions.length), /*#__PURE__*/React.createElement(Card.Link, {\n    href: \"#\",\n    style: {\n      marginLeft: \"10px\"\n    },\n    onClick: () => toggleAdd(index),\n    \"aria-controls\": \"questions-show\",\n    \"aria-expanded\": addArr[index],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 19\n    }\n  }, \"+\"))), /*#__PURE__*/React.createElement(Card.Subtitle, {\n    className: \"mb-2 text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 15\n    }\n  }, \"Vocab set\"), /*#__PURE__*/React.createElement(Card.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }\n  }, set.description), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btns\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Card.Link, {\n    href: \"#\",\n    onClick: () => editSet(set, index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, \"Edit\"), /*#__PURE__*/React.createElement(Card.Link, {\n    href: \"#\",\n    style: {\n      color: \"red\"\n    },\n    onClick: () => deleteSet(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }, \"Delete\"), /*#__PURE__*/React.createElement(Card.Link, {\n    href: \"#\",\n    style: {\n      color: \"seagreen\"\n    },\n    onClick: () => practiceSet(set),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }, \"Practice\")))), /*#__PURE__*/React.createElement(Collapse, {\n    in: addArr[index],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"questions-show\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(QuestionForm, {\n    questions: set.questions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 15\n    }\n  }))))));\n}","map":{"version":3,"sources":["/Users/rb/Desktop/React/quizapp/vocab-app/src/views/Sets.js"],"names":["React","useContext","useEffect","useState","useCallback","styled","Card","Badge","SetForm","Collapse","DataContext","QuestionForm","Styles","div","Sets","data","setData","editedSet","updateSet","setName","description","id","index","questions","addArr","setShowAdd","console","log","editSet","set","editIndex","deleteSet","tempData","splice","practiceSet","updateEdits","newData","toggleAdd","map","length","marginLeft","color"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport Card from \"react-bootstrap/Card\";\nimport Badge from \"react-bootstrap/Badge\";\nimport SetForm from \"../components/SetForm\";\nimport Collapse from \"react-bootstrap/Collapse\";\nimport { DataContext } from \"../Store\";\nimport QuestionForm from \"../components/QuestionForm\";\n\nconst Styles = styled.div`\n  .container {\n    width: 500px;\n    align-content: center;\n  }\n\n  .card {\n    text-align: left;\n  }\n\n  .badge {\n    margin-left: 5px;\n  }\n\n  .btns {\n    text-align: center;\n  }\n`;\n\nexport default function Sets() {\n  // Global state storing all sets\n  const [data, setData] = useContext(DataContext);\n\n  // Tracks if a set is being edited\n  const [editedSet, updateSet] = useState({\n    setName: \"\",\n    description: \"\",\n    id: null,\n    index: null,\n    questions: [],\n  });\n\n  // Tracks which set questions are being updated\n  const [addArr, setShowAdd] = useState([false, false]);\n\n  useEffect(() => {\n    console.log(data);\n  }, [data]);\n\n  const editSet = (set, editIndex) => {\n    updateSet({\n      setName: set.setName,\n      description: set.description,\n      id: set.id,\n      index: editIndex,\n      questions: set.questions,\n    });\n  };\n\n  const deleteSet = (index) => {\n    let tempData = data;\n    tempData.splice(index, 1);\n\n    setData(tempData);\n  };\n\n  const practiceSet = (set) => {\n    console.log(data);\n  };\n\n  const updateEdits = useCallback(\n    (newData) => {\n      setData(newData);\n      console.log(\"NEXT IS CALLBACK DATA\");\n      console.log(data);\n      console.log(\"update is being called\");\n\n      updateSet({ setName: \"\", description: \"\", id: null, index: null, questions: [] });\n    },\n    [data, setData]\n  );\n\n  const toggleAdd = (index) => {\n    let tempData = addArr;\n    tempData[index] = !tempData[index];\n    setShowAdd(tempData);\n  };\n\n  return (\n    <Styles>\n      <SetForm newSet={editedSet} updateCallback={updateEdits} />\n      {data.map((set, index) => (\n        <div className=\"container\" key={set.id}>\n          <Card>\n            <Card.Body>\n              <Card.Title>\n                <h3>\n                  {set.setName} <Badge variant=\"primary\">{set.questions.length}</Badge>\n                  <Card.Link\n                    href=\"#\"\n                    style={{ marginLeft: \"10px\" }}\n                    onClick={() => toggleAdd(index)}\n                    aria-controls=\"questions-show\"\n                    aria-expanded={addArr[index]}\n                  >\n                    +\n                  </Card.Link>\n                </h3>\n              </Card.Title>\n              <Card.Subtitle className=\"mb-2 text-muted\">Vocab set</Card.Subtitle>\n              <Card.Text>{set.description}</Card.Text>\n              <div className=\"btns\">\n                <Card.Link href=\"#\" onClick={() => editSet(set, index)}>\n                  Edit\n                </Card.Link>\n                <Card.Link href=\"#\" style={{ color: \"red\" }} onClick={() => deleteSet(index)}>\n                  Delete\n                </Card.Link>\n                <Card.Link href=\"#\" style={{ color: \"seagreen\" }} onClick={() => practiceSet(set)}>\n                  Practice\n                </Card.Link>\n              </div>\n            </Card.Body>\n          </Card>\n          <Collapse in={addArr[index]}>\n            <div id=\"questions-show\">\n              <QuestionForm questions={set.questions} />\n            </div>\n          </Collapse>\n          {/* {addArr[index] ? <QuestionForm /> : <div></div>} */}\n        </div>\n      ))}\n    </Styles>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}